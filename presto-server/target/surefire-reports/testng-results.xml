<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="0" total="252" passed="252">
  <reporter-output>
  </reporter-output>
  <suite name="Command line suite" duration-ms="184263" started-at="2014-05-07T07:00:47Z" finished-at="2014-05-07T07:03:51Z">
    <groups>
    </groups>
    <test name="Command line test" duration-ms="184263" started-at="2014-05-07T07:00:47Z" finished-at="2014-05-07T07:03:51Z">
      <class name="com.facebook.presto.discovery.TestEmbeddedDiscoveryConfig">
        <test-method status="PASS" signature="testDefaults()[pri:0, instance:com.facebook.presto.discovery.TestEmbeddedDiscoveryConfig@24a5031d]" name="testDefaults" duration-ms="136" started-at="2014-05-07T07:03:46Z" finished-at="2014-05-07T07:03:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaults -->
        <test-method status="PASS" signature="testExplicitPropertyMappings()[pri:0, instance:com.facebook.presto.discovery.TestEmbeddedDiscoveryConfig@24a5031d]" name="testExplicitPropertyMappings" duration-ms="2" started-at="2014-05-07T07:03:46Z" finished-at="2014-05-07T07:03:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExplicitPropertyMappings -->
      </class> <!-- com.facebook.presto.discovery.TestEmbeddedDiscoveryConfig -->
      <class name="com.facebook.presto.server.TestExecuteResource">
        <test-method status="PASS" signature="setup()[pri:0, instance:com.facebook.presto.server.TestExecuteResource@57e4bfbe]" name="setup" is-config="true" duration-ms="892" started-at="2014-05-07T07:03:46Z" finished-at="2014-05-07T07:03:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testExecute()[pri:0, instance:com.facebook.presto.server.TestExecuteResource@57e4bfbe]" name="testExecute" duration-ms="351" started-at="2014-05-07T07:03:47Z" finished-at="2014-05-07T07:03:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExecute -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:com.facebook.presto.server.TestExecuteResource@57e4bfbe]" name="teardown" is-config="true" duration-ms="161" started-at="2014-05-07T07:03:47Z" finished-at="2014-05-07T07:03:47Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.facebook.presto.server.TestExecuteResource -->
      <class name="com.facebook.presto.server.TestDistributedQueries">
        <test-method status="PASS" signature="setupDatabase()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="setupDatabase" is-config="true" duration-ms="23612" started-at="2014-05-07T07:00:47Z" finished-at="2014-05-07T07:01:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setupDatabase -->
        <test-method status="PASS" signature="testAggregationWithLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAggregationWithLimit" duration-ms="693" started-at="2014-05-07T07:01:10Z" finished-at="2014-05-07T07:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAggregationWithLimit -->
        <test-method status="PASS" signature="testAggregationWithProjection()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAggregationWithProjection" duration-ms="265" started-at="2014-05-07T07:01:11Z" finished-at="2014-05-07T07:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAggregationWithProjection -->
        <test-method status="PASS" signature="testAggregationWithProjection2()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAggregationWithProjection2" duration-ms="328" started-at="2014-05-07T07:01:11Z" finished-at="2014-05-07T07:01:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAggregationWithProjection2 -->
        <test-method status="PASS" signature="testAliasedInInlineView()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAliasedInInlineView" duration-ms="729" started-at="2014-05-07T07:01:12Z" finished-at="2014-05-07T07:01:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAliasedInInlineView -->
        <test-method status="PASS" signature="testAntiJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAntiJoin" duration-ms="1799" started-at="2014-05-07T07:01:12Z" finished-at="2014-05-07T07:01:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAntiJoin -->
        <test-method status="PASS" signature="testApproxPercentile()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testApproxPercentile" duration-ms="1050" started-at="2014-05-07T07:01:14Z" finished-at="2014-05-07T07:01:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApproxPercentile -->
        <test-method status="PASS" signature="testApproximateCountDistinct()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testApproximateCountDistinct" duration-ms="240" started-at="2014-05-07T07:01:15Z" finished-at="2014-05-07T07:01:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApproximateCountDistinct -->
        <test-method status="PASS" signature="testApproximateCountDistinctGroupBy()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testApproximateCountDistinctGroupBy" duration-ms="199" started-at="2014-05-07T07:01:15Z" finished-at="2014-05-07T07:01:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testApproximateCountDistinctGroupBy -->
        <test-method status="PASS" signature="testArithmeticNegation()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testArithmeticNegation" duration-ms="260" started-at="2014-05-07T07:01:16Z" finished-at="2014-05-07T07:01:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testArithmeticNegation -->
        <test-method status="PASS" signature="testAverageAll()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testAverageAll" duration-ms="143" started-at="2014-05-07T07:01:16Z" finished-at="2014-05-07T07:01:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAverageAll -->
        <test-method status="PASS" signature="testBuildFilteredLeftJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testBuildFilteredLeftJoin" duration-ms="4894" started-at="2014-05-07T07:01:16Z" finished-at="2014-05-07T07:01:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBuildFilteredLeftJoin -->
        <test-method status="PASS" signature="testBuildFilteredRightJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testBuildFilteredRightJoin" duration-ms="1328" started-at="2014-05-07T07:01:21Z" finished-at="2014-05-07T07:01:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBuildFilteredRightJoin -->
        <test-method status="PASS" signature="testCaseInsensitiveAliasedRelation()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCaseInsensitiveAliasedRelation" duration-ms="569" started-at="2014-05-07T07:01:22Z" finished-at="2014-05-07T07:01:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCaseInsensitiveAliasedRelation -->
        <test-method status="PASS" signature="testCaseInsensitiveAttribute()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCaseInsensitiveAttribute" duration-ms="238" started-at="2014-05-07T07:01:23Z" finished-at="2014-05-07T07:01:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCaseInsensitiveAttribute -->
        <test-method status="PASS" signature="testCaseInsensitiveOutputAliasInOrderBy()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCaseInsensitiveOutputAliasInOrderBy" duration-ms="356" started-at="2014-05-07T07:01:23Z" finished-at="2014-05-07T07:01:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCaseInsensitiveOutputAliasInOrderBy -->
        <test-method status="PASS" signature="testCaseNoElse()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCaseNoElse" duration-ms="315" started-at="2014-05-07T07:01:23Z" finished-at="2014-05-07T07:01:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCaseNoElse -->
        <test-method status="PASS" signature="testCast()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCast" duration-ms="1125" started-at="2014-05-07T07:01:24Z" finished-at="2014-05-07T07:01:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCast -->
        <test-method status="PASS" signature="testChainedUnionsWithOrder()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testChainedUnionsWithOrder" duration-ms="828" started-at="2014-05-07T07:01:25Z" finished-at="2014-05-07T07:01:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testChainedUnionsWithOrder -->
        <test-method status="PASS" signature="testColumnAliases()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testColumnAliases" duration-ms="318" started-at="2014-05-07T07:01:26Z" finished-at="2014-05-07T07:01:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testColumnAliases -->
        <test-method status="PASS" signature="testComplexQuery()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testComplexQuery" duration-ms="197" started-at="2014-05-07T07:01:26Z" finished-at="2014-05-07T07:01:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testComplexQuery -->
        <test-method status="PASS" signature="testConcatOperator()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testConcatOperator" duration-ms="200" started-at="2014-05-07T07:01:26Z" finished-at="2014-05-07T07:01:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcatOperator -->
        <test-method status="PASS" signature="testCountAll()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountAll" duration-ms="124" started-at="2014-05-07T07:01:26Z" finished-at="2014-05-07T07:01:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountAll -->
        <test-method status="PASS" signature="testCountAllWithComparison()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountAllWithComparison" duration-ms="283" started-at="2014-05-07T07:01:26Z" finished-at="2014-05-07T07:01:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountAllWithComparison -->
        <test-method status="PASS" signature="testCountAllWithPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountAllWithPredicate" duration-ms="214" started-at="2014-05-07T07:01:27Z" finished-at="2014-05-07T07:01:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountAllWithPredicate -->
        <test-method status="PASS" signature="testCountBoolean()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountBoolean" duration-ms="202" started-at="2014-05-07T07:01:27Z" finished-at="2014-05-07T07:01:27Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountBoolean -->
        <test-method status="PASS" signature="testCountColumn()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountColumn" duration-ms="993" started-at="2014-05-07T07:01:27Z" finished-at="2014-05-07T07:01:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountColumn -->
        <test-method status="PASS" signature="testCountDistinct()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountDistinct" duration-ms="38" started-at="2014-05-07T07:01:28Z" finished-at="2014-05-07T07:01:28Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[DISTINCT in aggregation parameters not yet supported]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: DISTINCT in aggregation parameters not yet supported
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeAggregations(TupleAnalyzer.java:721)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:266)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountDistinct -->
        <test-method status="PASS" signature="testCountWithAndPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithAndPredicate" duration-ms="260" started-at="2014-05-07T07:01:28Z" finished-at="2014-05-07T07:01:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithAndPredicate -->
        <test-method status="PASS" signature="testCountWithCoalescePredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithCoalescePredicate" duration-ms="82" started-at="2014-05-07T07:01:28Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithCoalescePredicate -->
        <test-method status="PASS" signature="testCountWithInlineView()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithInlineView" duration-ms="213" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithInlineView -->
        <test-method status="PASS" signature="testCountWithIsNotNullPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithIsNotNullPredicate" duration-ms="188" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithIsNotNullPredicate -->
        <test-method status="PASS" signature="testCountWithIsNullPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithIsNullPredicate" duration-ms="217" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithIsNullPredicate -->
        <test-method status="PASS" signature="testCountWithNotPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithNotPredicate" duration-ms="122" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithNotPredicate -->
        <test-method status="PASS" signature="testCountWithNullIfPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithNullIfPredicate" duration-ms="195" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithNullIfPredicate -->
        <test-method status="PASS" signature="testCountWithNullPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithNullPredicate" duration-ms="190" started-at="2014-05-07T07:01:29Z" finished-at="2014-05-07T07:01:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithNullPredicate -->
        <test-method status="PASS" signature="testCountWithOrPredicate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testCountWithOrPredicate" duration-ms="267" started-at="2014-05-07T07:01:30Z" finished-at="2014-05-07T07:01:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCountWithOrPredicate -->
        <test-method status="PASS" signature="testDefaultExplainGraphvizFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDefaultExplainGraphvizFormat" duration-ms="84" started-at="2014-05-07T07:01:30Z" finished-at="2014-05-07T07:01:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultExplainGraphvizFormat -->
        <test-method status="PASS" signature="testDefaultExplainTextFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDefaultExplainTextFormat" duration-ms="63" started-at="2014-05-07T07:01:30Z" finished-at="2014-05-07T07:01:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultExplainTextFormat -->
        <test-method status="PASS" signature="testDistinct()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistinct" duration-ms="248" started-at="2014-05-07T07:01:30Z" finished-at="2014-05-07T07:01:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinct -->
        <test-method status="PASS" signature="testDistinctMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistinctMultipleFields" duration-ms="182" started-at="2014-05-07T07:01:30Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctMultipleFields -->
        <test-method status="PASS" signature="testDistinctWithOrderBy()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistinctWithOrderBy" duration-ms="152" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctWithOrderBy -->
        <test-method status="PASS" signature="testDistinctWithOrderByNotInSelect()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistinctWithOrderByNotInSelect" duration-ms="11" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[For SELECT DISTINCT, ORDER BY expressions must appear in select list]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: For SELECT DISTINCT, ORDER BY expressions must appear in select list
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeOrderBy(TupleAnalyzer.java:564)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:263)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistinctWithOrderByNotInSelect -->
        <test-method status="PASS" signature="testDistributedExplain()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistributedExplain" duration-ms="60" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistributedExplain -->
        <test-method status="PASS" signature="testDistributedExplainGraphvizFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistributedExplainGraphvizFormat" duration-ms="63" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistributedExplainGraphvizFormat -->
        <test-method status="PASS" signature="testDistributedExplainTextFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDistributedExplainTextFormat" duration-ms="52" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDistributedExplainTextFormat -->
        <test-method status="PASS" signature="testDoubleFilteredLeftJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDoubleFilteredLeftJoinWithLeftConstantEquality" duration-ms="241" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoubleFilteredLeftJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testDoubleFilteredLeftJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDoubleFilteredLeftJoinWithRightConstantEquality" duration-ms="193" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoubleFilteredLeftJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testDoubleFilteredRightJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDoubleFilteredRightJoinWithLeftConstantEquality" duration-ms="256" started-at="2014-05-07T07:01:31Z" finished-at="2014-05-07T07:01:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoubleFilteredRightJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testDoubleFilteredRightJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDoubleFilteredRightJoinWithRightConstantEquality" duration-ms="245" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDoubleFilteredRightJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testDual()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDual" duration-ms="29" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDual -->
        <test-method status="PASS" signature="testDuplicateFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testDuplicateFields" duration-ms="159" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuplicateFields -->
        <test-method status="PASS" signature="testFunctionNotRegistered()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testFunctionNotRegistered" duration-ms="11" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:32Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[Unexpected parameters (bigint) for function length. Expected: length(varchar)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Unexpected parameters (bigint) for function length. Expected: length(varchar)
	at com.facebook.presto.metadata.FunctionRegistry.get(FunctionRegistry.java:209)
	at com.facebook.presto.metadata.MetadataManager.getFunction(MetadataManager.java:81)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:480)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitFunctionCall(ExpressionAnalyzer.java:126)
	at com.facebook.presto.sql.tree.FunctionCall.accept(FunctionCall.java:67)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:123)
	at com.facebook.presto.sql.analyzer.Analyzer.analyzeExpression(Analyzer.java:73)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:661)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:261)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFunctionNotRegistered -->
        <test-method status="PASS" signature="testGroupAggregationOverNestedGroupByAggregation()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupAggregationOverNestedGroupByAggregation" duration-ms="351" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupAggregationOverNestedGroupByAggregation -->
        <test-method status="PASS" signature="testGroupByBetween()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByBetween" duration-ms="1038" started-at="2014-05-07T07:01:32Z" finished-at="2014-05-07T07:01:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByBetween -->
        <test-method status="PASS" signature="testGroupByCase()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByCase" duration-ms="572" started-at="2014-05-07T07:01:33Z" finished-at="2014-05-07T07:01:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByCase -->
        <test-method status="PASS" signature="testGroupByCaseNoElse()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByCaseNoElse" duration-ms="585" started-at="2014-05-07T07:01:34Z" finished-at="2014-05-07T07:01:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByCaseNoElse -->
        <test-method status="PASS" signature="testGroupByCast()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByCast" duration-ms="1009" started-at="2014-05-07T07:01:35Z" finished-at="2014-05-07T07:01:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByCast -->
        <test-method status="PASS" signature="testGroupByCoalesce()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByCoalesce" duration-ms="825" started-at="2014-05-07T07:01:36Z" finished-at="2014-05-07T07:01:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByCoalesce -->
        <test-method status="PASS" signature="testGroupByCount()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByCount" duration-ms="179" started-at="2014-05-07T07:01:36Z" finished-at="2014-05-07T07:01:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByCount -->
        <test-method status="PASS" signature="testGroupByExtract()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByExtract" duration-ms="994" started-at="2014-05-07T07:01:37Z" finished-at="2014-05-07T07:01:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByExtract -->
        <test-method status="PASS" signature="testGroupByIf()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByIf" duration-ms="212" started-at="2014-05-07T07:01:38Z" finished-at="2014-05-07T07:01:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByIf -->
        <test-method status="PASS" signature="testGroupByKeyPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByKeyPredicatePushdown" duration-ms="554" started-at="2014-05-07T07:01:38Z" finished-at="2014-05-07T07:01:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByKeyPredicatePushdown -->
        <test-method status="PASS" signature="testGroupByMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByMultipleFields" duration-ms="250" started-at="2014-05-07T07:01:38Z" finished-at="2014-05-07T07:01:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByMultipleFields -->
        <test-method status="PASS" signature="testGroupByMultipleFieldsWithPredicateOnAggregationArgument()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByMultipleFieldsWithPredicateOnAggregationArgument" duration-ms="89" started-at="2014-05-07T07:01:39Z" finished-at="2014-05-07T07:01:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByMultipleFieldsWithPredicateOnAggregationArgument -->
        <test-method status="PASS" signature="testGroupByNoAggregations()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByNoAggregations" duration-ms="86" started-at="2014-05-07T07:01:39Z" finished-at="2014-05-07T07:01:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByNoAggregations -->
        <test-method status="PASS" signature="testGroupByNullIf()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByNullIf" duration-ms="1138" started-at="2014-05-07T07:01:39Z" finished-at="2014-05-07T07:01:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByNullIf -->
        <test-method status="PASS" signature="testGroupByOrderByLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByOrderByLimit" duration-ms="77" started-at="2014-05-07T07:01:40Z" finished-at="2014-05-07T07:01:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByOrderByLimit -->
        <test-method status="PASS" signature="testGroupByOrdinal()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByOrdinal" duration-ms="195" started-at="2014-05-07T07:01:40Z" finished-at="2014-05-07T07:01:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByOrdinal -->
        <test-method status="PASS" signature="testGroupByRepeatedField()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByRepeatedField" duration-ms="188" started-at="2014-05-07T07:01:40Z" finished-at="2014-05-07T07:01:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByRepeatedField -->
        <test-method status="PASS" signature="testGroupByRepeatedField2()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByRepeatedField2" duration-ms="199" started-at="2014-05-07T07:01:40Z" finished-at="2014-05-07T07:01:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByRepeatedField2 -->
        <test-method status="PASS" signature="testGroupBySearchedCase()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupBySearchedCase" duration-ms="311" started-at="2014-05-07T07:01:41Z" finished-at="2014-05-07T07:01:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupBySearchedCase -->
        <test-method status="PASS" signature="testGroupBySearchedCaseNoElse()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupBySearchedCaseNoElse" duration-ms="483" started-at="2014-05-07T07:01:41Z" finished-at="2014-05-07T07:01:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupBySearchedCaseNoElse -->
        <test-method status="PASS" signature="testGroupBySum()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupBySum" duration-ms="124" started-at="2014-05-07T07:01:41Z" finished-at="2014-05-07T07:01:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupBySum -->
        <test-method status="PASS" signature="testGroupByWithAlias()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByWithAlias" duration-ms="105" started-at="2014-05-07T07:01:41Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByWithAlias -->
        <test-method status="PASS" signature="testGroupByWithWildcard()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByWithWildcard" duration-ms="250" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByWithWildcard -->
        <test-method status="PASS" signature="testGroupByWithoutAggregation()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testGroupByWithoutAggregation" duration-ms="130" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGroupByWithoutAggregation -->
        <test-method status="PASS" signature="testHaving()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testHaving" duration-ms="114" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHaving -->
        <test-method status="PASS" signature="testHaving2()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testHaving2" duration-ms="87" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHaving2 -->
        <test-method status="PASS" signature="testHaving3()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testHaving3" duration-ms="129" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHaving3 -->
        <test-method status="PASS" signature="testHistogram()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testHistogram" duration-ms="222" started-at="2014-05-07T07:01:42Z" finished-at="2014-05-07T07:01:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHistogram -->
        <test-method status="PASS" signature="testIfExpression()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testIfExpression" duration-ms="865" started-at="2014-05-07T07:01:43Z" finished-at="2014-05-07T07:01:43Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIfExpression -->
        <test-method status="PASS" signature="testIn()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testIn" duration-ms="314" started-at="2014-05-07T07:01:43Z" finished-at="2014-05-07T07:01:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIn -->
        <test-method status="PASS" signature="testInlineView()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testInlineView" duration-ms="248" started-at="2014-05-07T07:01:44Z" finished-at="2014-05-07T07:01:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInlineView -->
        <test-method status="PASS" signature="testInlineViewWithProjections()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testInlineViewWithProjections" duration-ms="308" started-at="2014-05-07T07:01:44Z" finished-at="2014-05-07T07:01:44Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInlineViewWithProjections -->
        <test-method status="PASS" signature="testInvalidColumn()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testInvalidColumn" duration-ms="17" started-at="2014-05-07T07:01:44Z" finished-at="2014-05-07T07:01:44Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[Column 'orderkey_1' cannot be resolved]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: Column 'orderkey_1' cannot be resolved
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitQualifiedNameReference(ExpressionAnalyzer.java:156)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitQualifiedNameReference(ExpressionAnalyzer.java:126)
	at com.facebook.presto.sql.tree.QualifiedNameReference.accept(QualifiedNameReference.java:41)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:123)
	at com.facebook.presto.sql.analyzer.Analyzer.analyzeExpression(Analyzer.java:73)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:661)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:261)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitTableSubquery(TupleAnalyzer.java:242)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitTableSubquery(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.TableSubquery.accept(TableSubquery.java:36)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitAliasedRelation(TupleAnalyzer.java:171)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitAliasedRelation(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.AliasedRelation.accept(AliasedRelation.java:57)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitJoin(TupleAnalyzer.java:321)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitJoin(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.Join.accept(Join.java:66)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeFrom(TupleAnalyzer.java:704)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:257)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvalidColumn -->
        <test-method status="PASS" signature="testJoinAggregations()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinAggregations" duration-ms="5223" started-at="2014-05-07T07:01:44Z" finished-at="2014-05-07T07:01:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinAggregations -->
        <test-method status="PASS" signature="testJoinDoubleClauseWithLeftOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinDoubleClauseWithLeftOverlap" duration-ms="257" started-at="2014-05-07T07:01:50Z" finished-at="2014-05-07T07:01:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinDoubleClauseWithLeftOverlap -->
        <test-method status="PASS" signature="testJoinDoubleClauseWithRightOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinDoubleClauseWithRightOverlap" duration-ms="257" started-at="2014-05-07T07:01:50Z" finished-at="2014-05-07T07:01:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinDoubleClauseWithRightOverlap -->
        <test-method status="PASS" signature="testJoinOnConstantExpression()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinOnConstantExpression" duration-ms="12" started-at="2014-05-07T07:01:50Z" finished-at="2014-05-07T07:01:50Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[Joins on constant expressions (i.e., cross joins) not supported]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: Joins on constant expressions (i.e., cross joins) not supported
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitJoin(TupleAnalyzer.java:368)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitJoin(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.Join.accept(Join.java:66)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeFrom(TupleAnalyzer.java:704)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:257)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinOnConstantExpression -->
        <test-method status="PASS" signature="testJoinOnMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinOnMultipleFields" duration-ms="193" started-at="2014-05-07T07:01:50Z" finished-at="2014-05-07T07:01:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinOnMultipleFields -->
        <test-method status="PASS" signature="testJoinPredicateMoveAround()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinPredicateMoveAround" duration-ms="1820" started-at="2014-05-07T07:01:50Z" finished-at="2014-05-07T07:01:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinPredicateMoveAround -->
        <test-method status="PASS" signature="testJoinPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinPredicatePushdown" duration-ms="270" started-at="2014-05-07T07:01:52Z" finished-at="2014-05-07T07:01:52Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinPredicatePushdown -->
        <test-method status="PASS" signature="testJoinUnaliasedSubqueries()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinUnaliasedSubqueries" duration-ms="230" started-at="2014-05-07T07:01:52Z" finished-at="2014-05-07T07:01:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinUnaliasedSubqueries -->
        <test-method status="PASS" signature="testJoinUsing()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinUsing" duration-ms="205" started-at="2014-05-07T07:01:53Z" finished-at="2014-05-07T07:01:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinUsing -->
        <test-method status="PASS" signature="testJoinUsingMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinUsingMultipleFields" duration-ms="122" started-at="2014-05-07T07:01:53Z" finished-at="2014-05-07T07:01:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinUsingMultipleFields -->
        <test-method status="PASS" signature="testJoinWithAlias()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithAlias" duration-ms="4696" started-at="2014-05-07T07:01:53Z" finished-at="2014-05-07T07:01:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithAlias -->
        <test-method status="PASS" signature="testJoinWithComplexExpressions()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithComplexExpressions" duration-ms="256" started-at="2014-05-07T07:01:58Z" finished-at="2014-05-07T07:01:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithComplexExpressions -->
        <test-method status="PASS" signature="testJoinWithComplexExpressions2()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithComplexExpressions2" duration-ms="178" started-at="2014-05-07T07:01:58Z" finished-at="2014-05-07T07:01:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithComplexExpressions2 -->
        <test-method status="PASS" signature="testJoinWithComplexExpressions3()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithComplexExpressions3" duration-ms="231" started-at="2014-05-07T07:01:58Z" finished-at="2014-05-07T07:01:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithComplexExpressions3 -->
        <test-method status="PASS" signature="testJoinWithConstantExpression()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithConstantExpression" duration-ms="181" started-at="2014-05-07T07:01:58Z" finished-at="2014-05-07T07:01:58Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithConstantExpression -->
        <test-method status="PASS" signature="testJoinWithFullyPushedDownJoinClause()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithFullyPushedDownJoinClause" duration-ms="251" started-at="2014-05-07T07:01:58Z" finished-at="2014-05-07T07:01:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithFullyPushedDownJoinClause -->
        <test-method status="PASS" signature="testJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithLeftConstantEquality" duration-ms="116" started-at="2014-05-07T07:01:59Z" finished-at="2014-05-07T07:01:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testJoinWithMultiFieldGroupBy()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithMultiFieldGroupBy" duration-ms="420" started-at="2014-05-07T07:01:59Z" finished-at="2014-05-07T07:01:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithMultiFieldGroupBy -->
        <test-method status="PASS" signature="testJoinWithNonJoinExpression()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithNonJoinExpression" duration-ms="166" started-at="2014-05-07T07:01:59Z" finished-at="2014-05-07T07:01:59Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithNonJoinExpression -->
        <test-method status="PASS" signature="testJoinWithNullValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithNullValues" duration-ms="718" started-at="2014-05-07T07:01:59Z" finished-at="2014-05-07T07:02:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithNullValues -->
        <test-method status="PASS" signature="testJoinWithReversedComparison()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithReversedComparison" duration-ms="235" started-at="2014-05-07T07:02:00Z" finished-at="2014-05-07T07:02:00Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithReversedComparison -->
        <test-method status="PASS" signature="testJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testJoinWithRightConstantEquality" duration-ms="240" started-at="2014-05-07T07:02:00Z" finished-at="2014-05-07T07:02:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testLeftFilteredJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftFilteredJoin" duration-ms="802" started-at="2014-05-07T07:02:01Z" finished-at="2014-05-07T07:02:01Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftFilteredJoin -->
        <test-method status="PASS" signature="testLeftJoinAsInnerPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinAsInnerPredicatePushdown" duration-ms="397" started-at="2014-05-07T07:02:01Z" finished-at="2014-05-07T07:02:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinAsInnerPredicatePushdown -->
        <test-method status="PASS" signature="testLeftJoinDoubleClauseWithLeftOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinDoubleClauseWithLeftOverlap" duration-ms="425" started-at="2014-05-07T07:02:02Z" finished-at="2014-05-07T07:02:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinDoubleClauseWithLeftOverlap -->
        <test-method status="PASS" signature="testLeftJoinDoubleClauseWithRightOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinDoubleClauseWithRightOverlap" duration-ms="293" started-at="2014-05-07T07:02:02Z" finished-at="2014-05-07T07:02:02Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinDoubleClauseWithRightOverlap -->
        <test-method status="PASS" signature="testLeftJoinEqualityInference()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinEqualityInference" duration-ms="1046" started-at="2014-05-07T07:02:02Z" finished-at="2014-05-07T07:02:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinEqualityInference -->
        <test-method status="PASS" signature="testLeftJoinNormalizedToInner()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinNormalizedToInner" duration-ms="368" started-at="2014-05-07T07:02:04Z" finished-at="2014-05-07T07:02:04Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinNormalizedToInner -->
        <test-method status="PASS" signature="testLeftJoinPredicateMoveAround()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinPredicateMoveAround" duration-ms="2528" started-at="2014-05-07T07:02:04Z" finished-at="2014-05-07T07:02:06Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinPredicateMoveAround -->
        <test-method status="PASS" signature="testLeftJoinPredicatePushdownWithSelfEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinPredicatePushdownWithSelfEquality" duration-ms="320" started-at="2014-05-07T07:02:06Z" finished-at="2014-05-07T07:02:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinPredicatePushdownWithSelfEquality -->
        <test-method status="PASS" signature="testLeftJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinWithLeftConstantEquality" duration-ms="243" started-at="2014-05-07T07:02:07Z" finished-at="2014-05-07T07:02:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testLeftJoinWithNullValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinWithNullValues" duration-ms="485" started-at="2014-05-07T07:02:07Z" finished-at="2014-05-07T07:02:07Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinWithNullValues -->
        <test-method status="PASS" signature="testLeftJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLeftJoinWithRightConstantEquality" duration-ms="731" started-at="2014-05-07T07:02:07Z" finished-at="2014-05-07T07:02:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLeftJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLimit" duration-ms="152" started-at="2014-05-07T07:02:08Z" finished-at="2014-05-07T07:02:08Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLimit -->
        <test-method status="PASS" signature="testLimitInInlineView()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLimitInInlineView" duration-ms="211" started-at="2014-05-07T07:02:08Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLimitInInlineView -->
        <test-method status="PASS" signature="testLimitPushDown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLimitPushDown" duration-ms="570" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLimitPushDown -->
        <test-method status="PASS" signature="testLimitZero()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLimitZero" duration-ms="32" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLimitZero -->
        <test-method status="PASS" signature="testLogicalExplain()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLogicalExplain" duration-ms="42" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogicalExplain -->
        <test-method status="PASS" signature="testLogicalExplainGraphvizFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLogicalExplainGraphvizFormat" duration-ms="46" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogicalExplainGraphvizFormat -->
        <test-method status="PASS" signature="testLogicalExplainTextFormat()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLogicalExplainTextFormat" duration-ms="41" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:09Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLogicalExplainTextFormat -->
        <test-method status="PASS" signature="testMaxMinStringWithNulls()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testMaxMinStringWithNulls" duration-ms="200" started-at="2014-05-07T07:02:09Z" finished-at="2014-05-07T07:02:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMaxMinStringWithNulls -->
        <test-method status="PASS" signature="testMixedWildcards()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testMixedWildcards" duration-ms="859" started-at="2014-05-07T07:02:10Z" finished-at="2014-05-07T07:02:10Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedWildcards -->
        <test-method status="PASS" signature="testMultiColumnUnionAll()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testMultiColumnUnionAll" duration-ms="898" started-at="2014-05-07T07:02:10Z" finished-at="2014-05-07T07:02:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultiColumnUnionAll -->
        <test-method status="PASS" signature="testMultipleWildcards()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testMultipleWildcards" duration-ms="936" started-at="2014-05-07T07:02:11Z" finished-at="2014-05-07T07:02:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMultipleWildcards -->
        <test-method status="PASS" signature="testNestedCount()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNestedCount" duration-ms="194" started-at="2014-05-07T07:02:12Z" finished-at="2014-05-07T07:02:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNestedCount -->
        <test-method status="PASS" signature="testNoFrom()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNoFrom" duration-ms="28" started-at="2014-05-07T07:02:12Z" finished-at="2014-05-07T07:02:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNoFrom -->
        <test-method status="PASS" signature="testNodeRoster()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNodeRoster" duration-ms="37" started-at="2014-05-07T07:02:12Z" finished-at="2014-05-07T07:02:12Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNodeRoster -->
        <test-method status="PASS" signature="testNonDeterministicAggregationPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNonDeterministicAggregationPredicatePushdown" duration-ms="91" started-at="2014-05-07T07:02:12Z" finished-at="2014-05-07T07:02:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonDeterministicAggregationPredicatePushdown -->
        <test-method status="PASS" signature="testNonDeterministicJoinPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNonDeterministicJoinPredicatePushdown" duration-ms="400" started-at="2014-05-07T07:02:13Z" finished-at="2014-05-07T07:02:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonDeterministicJoinPredicatePushdown -->
        <test-method status="PASS" signature="testNonDeterministicTableScanPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testNonDeterministicTableScanPredicatePushdown" duration-ms="212" started-at="2014-05-07T07:02:13Z" finished-at="2014-05-07T07:02:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonDeterministicTableScanPredicatePushdown -->
        <test-method status="PASS" signature="testOrderBy()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderBy" duration-ms="230" started-at="2014-05-07T07:02:13Z" finished-at="2014-05-07T07:02:13Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderBy -->
        <test-method status="PASS" signature="testOrderBy2()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderBy2" duration-ms="195" started-at="2014-05-07T07:02:13Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderBy2 -->
        <test-method status="PASS" signature="testOrderByAlias()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByAlias" duration-ms="205" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByAlias -->
        <test-method status="PASS" signature="testOrderByAliasWithSameNameAsUnselectedColumn()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByAliasWithSameNameAsUnselectedColumn" duration-ms="120" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByAliasWithSameNameAsUnselectedColumn -->
        <test-method status="PASS" signature="testOrderByExpressionWithLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByExpressionWithLimit" duration-ms="172" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByExpressionWithLimit -->
        <test-method status="PASS" signature="testOrderByLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByLimit" duration-ms="83" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByLimit -->
        <test-method status="PASS" signature="testOrderByMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByMultipleFields" duration-ms="171" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:14Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByMultipleFields -->
        <test-method status="PASS" signature="testOrderByOrdinal()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByOrdinal" duration-ms="235" started-at="2014-05-07T07:02:14Z" finished-at="2014-05-07T07:02:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByOrdinal -->
        <test-method status="PASS" signature="testOrderByOrdinalWithWildcard()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByOrdinalWithWildcard" duration-ms="499" started-at="2014-05-07T07:02:15Z" finished-at="2014-05-07T07:02:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByOrdinalWithWildcard -->
        <test-method status="PASS" signature="testOrderByWindowFunction()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderByWindowFunction" duration-ms="73" started-at="2014-05-07T07:02:15Z" finished-at="2014-05-07T07:02:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderByWindowFunction -->
        <test-method status="PASS" signature="testOrderLimitCompaction()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testOrderLimitCompaction" duration-ms="133" started-at="2014-05-07T07:02:15Z" finished-at="2014-05-07T07:02:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOrderLimitCompaction -->
        <test-method status="PASS" signature="testPlainLeftJoinPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testPlainLeftJoinPredicatePushdown" duration-ms="263" started-at="2014-05-07T07:02:15Z" finished-at="2014-05-07T07:02:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPlainLeftJoinPredicatePushdown -->
        <test-method status="PASS" signature="testPlainRightJoinPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testPlainRightJoinPredicatePushdown" duration-ms="344" started-at="2014-05-07T07:02:16Z" finished-at="2014-05-07T07:02:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPlainRightJoinPredicatePushdown -->
        <test-method status="PASS" signature="testPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testPredicatePushdown" duration-ms="240" started-at="2014-05-07T07:02:16Z" finished-at="2014-05-07T07:02:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPredicatePushdown -->
        <test-method status="PASS" signature="testPredicatePushdownJoinEqualityGroups()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testPredicatePushdownJoinEqualityGroups" duration-ms="270" started-at="2014-05-07T07:02:16Z" finished-at="2014-05-07T07:02:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPredicatePushdownJoinEqualityGroups -->
        <test-method status="PASS" signature="testProbeFilteredLeftJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testProbeFilteredLeftJoin" duration-ms="2250" started-at="2014-05-07T07:02:16Z" finished-at="2014-05-07T07:02:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProbeFilteredLeftJoin -->
        <test-method status="PASS" signature="testProbeFilteredRightJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testProbeFilteredRightJoin" duration-ms="807" started-at="2014-05-07T07:02:19Z" finished-at="2014-05-07T07:02:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProbeFilteredRightJoin -->
        <test-method status="PASS" signature="testQualifiedWildcard()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testQualifiedWildcard" duration-ms="589" started-at="2014-05-07T07:02:19Z" finished-at="2014-05-07T07:02:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQualifiedWildcard -->
        <test-method status="PASS" signature="testQualifiedWildcardFromAlias()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testQualifiedWildcardFromAlias" duration-ms="510" started-at="2014-05-07T07:02:20Z" finished-at="2014-05-07T07:02:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQualifiedWildcardFromAlias -->
        <test-method status="PASS" signature="testQualifiedWildcardFromInlineView()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testQualifiedWildcardFromInlineView" duration-ms="169" started-at="2014-05-07T07:02:21Z" finished-at="2014-05-07T07:02:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQualifiedWildcardFromInlineView -->
        <test-method status="PASS" signature="testQualifiedWildcardFromJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testQualifiedWildcardFromJoin" duration-ms="700" started-at="2014-05-07T07:02:21Z" finished-at="2014-05-07T07:02:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQualifiedWildcardFromJoin -->
        <test-method status="PASS" signature="testQuotedIdentifiers()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testQuotedIdentifiers" duration-ms="146" started-at="2014-05-07T07:02:21Z" finished-at="2014-05-07T07:02:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testQuotedIdentifiers -->
        <test-method status="PASS" signature="testReferenceToWithQueryInFromClause()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testReferenceToWithQueryInFromClause" duration-ms="532" started-at="2014-05-07T07:02:22Z" finished-at="2014-05-07T07:02:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReferenceToWithQueryInFromClause -->
        <test-method status="PASS" signature="testReorderOutputsOfGroupByAggregation()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testReorderOutputsOfGroupByAggregation" duration-ms="241" started-at="2014-05-07T07:02:22Z" finished-at="2014-05-07T07:02:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReorderOutputsOfGroupByAggregation -->
        <test-method status="PASS" signature="testRepeatedAggregations()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRepeatedAggregations" duration-ms="138" started-at="2014-05-07T07:02:22Z" finished-at="2014-05-07T07:02:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatedAggregations -->
        <test-method status="PASS" signature="testRepeatedOutputs()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRepeatedOutputs" duration-ms="208" started-at="2014-05-07T07:02:22Z" finished-at="2014-05-07T07:02:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRepeatedOutputs -->
        <test-method status="PASS" signature="testRightFilteredJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightFilteredJoin" duration-ms="802" started-at="2014-05-07T07:02:23Z" finished-at="2014-05-07T07:02:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightFilteredJoin -->
        <test-method status="PASS" signature="testRightJoinAsInnerPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinAsInnerPredicatePushdown" duration-ms="409" started-at="2014-05-07T07:02:23Z" finished-at="2014-05-07T07:02:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinAsInnerPredicatePushdown -->
        <test-method status="PASS" signature="testRightJoinDoubleClauseWithLeftOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinDoubleClauseWithLeftOverlap" duration-ms="302" started-at="2014-05-07T07:02:24Z" finished-at="2014-05-07T07:02:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinDoubleClauseWithLeftOverlap -->
        <test-method status="PASS" signature="testRightJoinDoubleClauseWithRightOverlap()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinDoubleClauseWithRightOverlap" duration-ms="215" started-at="2014-05-07T07:02:24Z" finished-at="2014-05-07T07:02:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinDoubleClauseWithRightOverlap -->
        <test-method status="PASS" signature="testRightJoinEqualityInference()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinEqualityInference" duration-ms="899" started-at="2014-05-07T07:02:24Z" finished-at="2014-05-07T07:02:25Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinEqualityInference -->
        <test-method status="PASS" signature="testRightJoinNormalizedToInner()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinNormalizedToInner" duration-ms="291" started-at="2014-05-07T07:02:25Z" finished-at="2014-05-07T07:02:26Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinNormalizedToInner -->
        <test-method status="PASS" signature="testRightJoinPredicateMoveAround()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinPredicateMoveAround" duration-ms="2162" started-at="2014-05-07T07:02:26Z" finished-at="2014-05-07T07:02:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinPredicateMoveAround -->
        <test-method status="PASS" signature="testRightJoinPredicatePushdownWithSelfEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinPredicatePushdownWithSelfEquality" duration-ms="263" started-at="2014-05-07T07:02:28Z" finished-at="2014-05-07T07:02:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinPredicatePushdownWithSelfEquality -->
        <test-method status="PASS" signature="testRightJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinWithLeftConstantEquality" duration-ms="1147" started-at="2014-05-07T07:02:28Z" finished-at="2014-05-07T07:02:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testRightJoinWithNullValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinWithNullValues" duration-ms="640" started-at="2014-05-07T07:02:29Z" finished-at="2014-05-07T07:02:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinWithNullValues -->
        <test-method status="PASS" signature="testRightJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testRightJoinWithRightConstantEquality" duration-ms="203" started-at="2014-05-07T07:02:30Z" finished-at="2014-05-07T07:02:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRightJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testSameInputToAggregates()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSameInputToAggregates" duration-ms="128" started-at="2014-05-07T07:02:30Z" finished-at="2014-05-07T07:02:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSameInputToAggregates -->
        <test-method status="PASS" signature="testScalarFunction()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testScalarFunction" duration-ms="191" started-at="2014-05-07T07:02:30Z" finished-at="2014-05-07T07:02:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScalarFunction -->
        <test-method status="PASS" signature="testSelectOnlyUnion()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSelectOnlyUnion" duration-ms="33" started-at="2014-05-07T07:02:30Z" finished-at="2014-05-07T07:02:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSelectOnlyUnion -->
        <test-method status="PASS" signature="testSelectWithComparison()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSelectWithComparison" duration-ms="202" started-at="2014-05-07T07:02:30Z" finished-at="2014-05-07T07:02:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSelectWithComparison -->
        <test-method status="PASS" signature="testSelfJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSelfJoin" duration-ms="207" started-at="2014-05-07T07:02:31Z" finished-at="2014-05-07T07:02:31Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSelfJoin -->
        <test-method status="PASS" signature="testSemiJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSemiJoin" duration-ms="1481" started-at="2014-05-07T07:02:31Z" finished-at="2014-05-07T07:02:32Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSemiJoin -->
        <test-method status="PASS" signature="testSemiJoinLimitPushDown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSemiJoinLimitPushDown" duration-ms="236" started-at="2014-05-07T07:02:32Z" finished-at="2014-05-07T07:02:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSemiJoinLimitPushDown -->
        <test-method status="PASS" signature="testSemiJoinNullHandling()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSemiJoinNullHandling" duration-ms="657" started-at="2014-05-07T07:02:33Z" finished-at="2014-05-07T07:02:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSemiJoinNullHandling -->
        <test-method status="PASS" signature="testSemiJoinPredicateMoveAround()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSemiJoinPredicateMoveAround" duration-ms="325" started-at="2014-05-07T07:02:33Z" finished-at="2014-05-07T07:02:33Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSemiJoinPredicateMoveAround -->
        <test-method status="PASS" signature="testShowColumns()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowColumns" duration-ms="232" started-at="2014-05-07T07:02:33Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowColumns -->
        <test-method status="PASS" signature="testShowFunctions()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowFunctions" duration-ms="40" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowFunctions -->
        <test-method status="PASS" signature="testShowPartitions()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowPartitions" duration-ms="32" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowPartitions -->
        <test-method status="PASS" signature="testShowSchemas()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowSchemas" duration-ms="73" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowSchemas -->
        <test-method status="PASS" signature="testShowTables()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowTables" duration-ms="90" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowTables -->
        <test-method status="PASS" signature="testShowTablesFrom()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowTablesFrom" duration-ms="207" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowTablesFrom -->
        <test-method status="PASS" signature="testShowTablesLike()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowTablesLike" duration-ms="177" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowTablesLike -->
        <test-method status="PASS" signature="testSimpleJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleJoin" duration-ms="255" started-at="2014-05-07T07:02:34Z" finished-at="2014-05-07T07:02:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleJoin -->
        <test-method status="PASS" signature="testSimpleJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleJoinWithLeftConstantEquality" duration-ms="167" started-at="2014-05-07T07:02:35Z" finished-at="2014-05-07T07:02:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testSimpleJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleJoinWithRightConstantEquality" duration-ms="181" started-at="2014-05-07T07:02:35Z" finished-at="2014-05-07T07:02:35Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testSimpleLeftJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleLeftJoin" duration-ms="642" started-at="2014-05-07T07:02:35Z" finished-at="2014-05-07T07:02:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleLeftJoin -->
        <test-method status="PASS" signature="testSimpleLeftJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleLeftJoinWithLeftConstantEquality" duration-ms="307" started-at="2014-05-07T07:02:36Z" finished-at="2014-05-07T07:02:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleLeftJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testSimpleLeftJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleLeftJoinWithRightConstantEquality" duration-ms="380" started-at="2014-05-07T07:02:36Z" finished-at="2014-05-07T07:02:36Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleLeftJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testSimpleRightJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleRightJoin" duration-ms="329" started-at="2014-05-07T07:02:36Z" finished-at="2014-05-07T07:02:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleRightJoin -->
        <test-method status="PASS" signature="testSimpleRightJoinWithLeftConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleRightJoinWithLeftConstantEquality" duration-ms="216" started-at="2014-05-07T07:02:37Z" finished-at="2014-05-07T07:02:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleRightJoinWithLeftConstantEquality -->
        <test-method status="PASS" signature="testSimpleRightJoinWithRightConstantEquality()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSimpleRightJoinWithRightConstantEquality" duration-ms="288" started-at="2014-05-07T07:02:37Z" finished-at="2014-05-07T07:02:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSimpleRightJoinWithRightConstantEquality -->
        <test-method status="PASS" signature="testSpecialFloatingPointValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSpecialFloatingPointValues" duration-ms="27" started-at="2014-05-07T07:02:37Z" finished-at="2014-05-07T07:02:37Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSpecialFloatingPointValues -->
        <test-method status="PASS" signature="testStdDev()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testStdDev" duration-ms="1331" started-at="2014-05-07T07:02:37Z" finished-at="2014-05-07T07:02:38Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStdDev -->
        <test-method status="PASS" signature="testStdDevPop()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testStdDevPop" duration-ms="999" started-at="2014-05-07T07:02:38Z" finished-at="2014-05-07T07:02:39Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testStdDevPop -->
        <test-method status="PASS" signature="testSubqueryBody()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSubqueryBody" duration-ms="139" started-at="2014-05-07T07:02:39Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubqueryBody -->
        <test-method status="PASS" signature="testSubqueryBodyDoubleOrderby()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSubqueryBodyDoubleOrderby" duration-ms="194" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubqueryBodyDoubleOrderby -->
        <test-method status="PASS" signature="testSubqueryBodyOrderLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSubqueryBodyOrderLimit" duration-ms="175" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubqueryBodyOrderLimit -->
        <test-method status="PASS" signature="testSubqueryBodyProjectedOrderby()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSubqueryBodyProjectedOrderby" duration-ms="211" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubqueryBodyProjectedOrderby -->
        <test-method status="PASS" signature="testSubqueryUnion()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSubqueryUnion" duration-ms="155" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubqueryUnion -->
        <test-method status="PASS" signature="testSumOfNulls()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testSumOfNulls" duration-ms="131" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:40Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSumOfNulls -->
        <test-method status="PASS" signature="testTableAsSubquery()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableAsSubquery" duration-ms="533" started-at="2014-05-07T07:02:40Z" finished-at="2014-05-07T07:02:41Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableAsSubquery -->
        <test-method status="PASS" signature="testTableQuery()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableQuery" duration-ms="587" started-at="2014-05-07T07:02:41Z" finished-at="2014-05-07T07:02:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableQuery -->
        <test-method status="PASS" signature="testTableQueryInUnion()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableQueryInUnion" duration-ms="558" started-at="2014-05-07T07:02:42Z" finished-at="2014-05-07T07:02:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableQueryInUnion -->
        <test-method status="PASS" signature="testTableQueryOrderLimit()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableQueryOrderLimit" duration-ms="192" started-at="2014-05-07T07:02:42Z" finished-at="2014-05-07T07:02:42Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableQueryOrderLimit -->
        <test-method status="PASS" signature="testTableSampleBernoulli()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableSampleBernoulli" duration-ms="10926" started-at="2014-05-07T07:02:42Z" finished-at="2014-05-07T07:02:53Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableSampleBernoulli -->
        <test-method status="PASS" signature="testTableSampleBernoulliBoundaryValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableSampleBernoulliBoundaryValues" duration-ms="21462" started-at="2014-05-07T07:02:53Z" finished-at="2014-05-07T07:03:15Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableSampleBernoulliBoundaryValues -->
        <test-method status="PASS" signature="testTopNByMultipleFields()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTopNByMultipleFields" duration-ms="1227" started-at="2014-05-07T07:03:15Z" finished-at="2014-05-07T07:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTopNByMultipleFields -->
        <test-method status="PASS" signature="testTrivialNonDeterministicPredicatePushdown()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTrivialNonDeterministicPredicatePushdown" duration-ms="107" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTrivialNonDeterministicPredicatePushdown -->
        <test-method status="PASS" signature="testTypeMismatch()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTypeMismatch" duration-ms="6" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:16Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[Types are not comparable with '<>': bigint vs varchar]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: Types are not comparable with '<>': bigint vs varchar
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:205)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer$Visitor.visitComparisonExpression(ExpressionAnalyzer.java:126)
	at com.facebook.presto.sql.tree.ComparisonExpression.accept(ComparisonExpression.java:78)
	at com.facebook.presto.sql.analyzer.ExpressionAnalyzer.analyze(ExpressionAnalyzer.java:123)
	at com.facebook.presto.sql.analyzer.Analyzer.analyzeExpression(Analyzer.java:73)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.analyzeSelect(TupleAnalyzer.java:661)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:261)
	at com.facebook.presto.sql.analyzer.TupleAnalyzer.visitQuerySpecification(TupleAnalyzer.java:96)
	at com.facebook.presto.sql.tree.QuerySpecification.accept(QuerySpecification.java:99)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:439)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTypeMismatch -->
        <test-method status="PASS" signature="testUnaliasSymbolReferencesWithUnion()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnaliasSymbolReferencesWithUnion" duration-ms="30" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnaliasSymbolReferencesWithUnion -->
        <test-method status="PASS" signature="testUnaliasedSubqueries()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnaliasedSubqueries" duration-ms="83" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnaliasedSubqueries -->
        <test-method status="PASS" signature="testUnaliasedSubqueries1()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnaliasedSubqueries1" duration-ms="208" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:16Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnaliasedSubqueries1 -->
        <test-method status="PASS" signature="testUnion()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnion" duration-ms="233" started-at="2014-05-07T07:03:16Z" finished-at="2014-05-07T07:03:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnion -->
        <test-method status="PASS" signature="testUnionAll()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnionAll" duration-ms="226" started-at="2014-05-07T07:03:17Z" finished-at="2014-05-07T07:03:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnionAll -->
        <test-method status="PASS" signature="testUnionDistinct()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testUnionDistinct" duration-ms="174" started-at="2014-05-07T07:03:17Z" finished-at="2014-05-07T07:03:17Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testUnionDistinct -->
        <test-method status="PASS" signature="testVariance()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testVariance" duration-ms="1529" started-at="2014-05-07T07:03:17Z" finished-at="2014-05-07T07:03:19Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVariance -->
        <test-method status="PASS" signature="testVariancePop()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testVariancePop" duration-ms="1188" started-at="2014-05-07T07:03:19Z" finished-at="2014-05-07T07:03:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testVariancePop -->
        <test-method status="PASS" signature="testWhereNull()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWhereNull" duration-ms="55" started-at="2014-05-07T07:03:20Z" finished-at="2014-05-07T07:03:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWhereNull -->
        <test-method status="PASS" signature="testWildcard()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWildcard" duration-ms="598" started-at="2014-05-07T07:03:20Z" finished-at="2014-05-07T07:03:20Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWildcard -->
        <test-method status="PASS" signature="testWildcardFromJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWildcardFromJoin" duration-ms="630" started-at="2014-05-07T07:03:20Z" finished-at="2014-05-07T07:03:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWildcardFromJoin -->
        <test-method status="PASS" signature="testWildcardFromSubquery()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWildcardFromSubquery" duration-ms="180" started-at="2014-05-07T07:03:21Z" finished-at="2014-05-07T07:03:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWildcardFromSubquery -->
        <test-method status="PASS" signature="testWindowFunctionsExpressions()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWindowFunctionsExpressions" duration-ms="90" started-at="2014-05-07T07:03:21Z" finished-at="2014-05-07T07:03:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWindowFunctionsExpressions -->
        <test-method status="PASS" signature="testWindowFunctionsFromAggregate()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWindowFunctionsFromAggregate" duration-ms="170" started-at="2014-05-07T07:03:21Z" finished-at="2014-05-07T07:03:21Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWindowFunctionsFromAggregate -->
        <test-method status="PASS" signature="testWith()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWith" duration-ms="569" started-at="2014-05-07T07:03:21Z" finished-at="2014-05-07T07:03:22Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWith -->
        <test-method status="PASS" signature="testWithAliased()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithAliased" duration-ms="491" started-at="2014-05-07T07:03:22Z" finished-at="2014-05-07T07:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithAliased -->
        <test-method status="PASS" signature="testWithChaining()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithChaining" duration-ms="274" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithChaining -->
        <test-method status="PASS" signature="testWithHiding()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithHiding" duration-ms="203" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithHiding -->
        <test-method status="PASS" signature="testWithNestedSubqueries()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithNestedSubqueries" duration-ms="153" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithNestedSubqueries -->
        <test-method status="PASS" signature="testWithQualifiedPrefix()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithQualifiedPrefix" duration-ms="198" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:23Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithQualifiedPrefix -->
        <test-method status="PASS" signature="testWithRecursive()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithRecursive" duration-ms="7" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:23Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[Recursive WITH queries are not supported]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.facebook.presto.sql.analyzer.SemanticException: Recursive WITH queries are not supported
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.analyzeWith(StatementAnalyzer.java:468)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:436)
	at com.facebook.presto.sql.analyzer.StatementAnalyzer.visitQuery(StatementAnalyzer.java:86)
	at com.facebook.presto.sql.tree.Query.accept(Query.java:71)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.analyzer.Analyzer.analyze(Analyzer.java:50)
	at com.facebook.presto.execution.SqlQueryExecution.doAnalyzeQuery(SqlQueryExecution.java:198)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:183)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithRecursive -->
        <test-method status="PASS" signature="testWithSelfJoin()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testWithSelfJoin" duration-ms="197" started-at="2014-05-07T07:03:23Z" finished-at="2014-05-07T07:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWithSelfJoin -->
        <test-method status="PASS" signature="testLargeQueryFailure()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLargeQueryFailure" duration-ms="118" started-at="2014-05-07T07:03:24Z" finished-at="2014-05-07T07:03:24Z">
          <exception class="com.facebook.presto.client.Failure">
            <message>
              <![CDATA[statement is too large (stack overflow during analysis)]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.RuntimeException: statement is too large (stack overflow during analysis)
	at com.facebook.presto.execution.SqlQueryExecution.analyzeQuery(SqlQueryExecution.java:186)
	at com.facebook.presto.execution.SqlQueryExecution.start(SqlQueryExecution.java:142)
	at com.facebook.presto.execution.SqlQueryManager$QueryStarter.run(SqlQueryManager.java:388)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)
	at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
	at java.util.concurrent.FutureTask.run(FutureTask.java:166)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
	at java.lang.Thread.run(Thread.java:722)
Caused by: java.lang.StackOverflowError
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.hashCode(LogicalBinaryExpression.java:101)
	at java.util.HashMap.get(HashMap.java:317)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:88)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.defaultRewrite(ExpressionTreeRewriter.java:53)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:93)
	at com.facebook.presto.sql.planner.TranslationMap$1.rewriteExpression(TranslationMap.java:84)
	at com.facebook.presto.sql.tree.ExpressionRewriter.rewriteLogicalBinaryExpression(ExpressionRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:167)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:68)
	at com.facebook.presto.sql.tree.LogicalBinaryExpression.accept(LogicalBinaryExpression.java:59)
	at com.facebook.presto.sql.tree.AstVisitor.process(AstVisitor.java:22)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter.rewrite(ExpressionTreeRewriter.java:45)
	at com.facebook.presto.sql.tree.ExpressionTreeRewriter$RewritingVisitor.visitLogicalBinaryExpression(ExpressionTreeRewriter.java:173)
]]>
            </full-stacktrace>
          </exception> <!-- com.facebook.presto.client.Failure -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLargeQueryFailure -->
        <test-method status="PASS" signature="testLargeQuerySuccess()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testLargeQuerySuccess" duration-ms="77" started-at="2014-05-07T07:03:24Z" finished-at="2014-05-07T07:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLargeQuerySuccess -->
        <test-method status="PASS" signature="testShowCatalogs()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testShowCatalogs" duration-ms="186" started-at="2014-05-07T07:03:24Z" finished-at="2014-05-07T07:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testShowCatalogs -->
        <test-method status="PASS" signature="testTableSampleSystem()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableSampleSystem" duration-ms="181" started-at="2014-05-07T07:03:24Z" finished-at="2014-05-07T07:03:24Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableSampleSystem -->
        <test-method status="PASS" signature="testTableSampleSystemBoundaryValues()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="testTableSampleSystemBoundaryValues" duration-ms="21026" started-at="2014-05-07T07:03:24Z" finished-at="2014-05-07T07:03:45Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTableSampleSystemBoundaryValues -->
        <test-method status="PASS" signature="cleanupDatabase()[pri:0, instance:com.facebook.presto.server.TestDistributedQueries@6e68780f]" name="cleanupDatabase" is-config="true" duration-ms="675" started-at="2014-05-07T07:03:45Z" finished-at="2014-05-07T07:03:46Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- cleanupDatabase -->
      </class> <!-- com.facebook.presto.server.TestDistributedQueries -->
      <class name="com.facebook.presto.server.TestServerConfig">
        <test-method status="PASS" signature="testDefaults()[pri:0, instance:com.facebook.presto.server.TestServerConfig@4d6f77b6]" name="testDefaults" duration-ms="25" started-at="2014-05-07T07:03:51Z" finished-at="2014-05-07T07:03:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaults -->
        <test-method status="PASS" signature="testExplicitPropertyMappings()[pri:0, instance:com.facebook.presto.server.TestServerConfig@4d6f77b6]" name="testExplicitPropertyMappings" duration-ms="2" started-at="2014-05-07T07:03:51Z" finished-at="2014-05-07T07:03:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExplicitPropertyMappings -->
      </class> <!-- com.facebook.presto.server.TestServerConfig -->
      <class name="com.facebook.presto.server.TestPluginManagerConfig">
        <test-method status="PASS" signature="testDefaults()[pri:0, instance:com.facebook.presto.server.TestPluginManagerConfig@7b54cbdf]" name="testDefaults" duration-ms="35" started-at="2014-05-07T07:03:50Z" finished-at="2014-05-07T07:03:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaults -->
        <test-method status="PASS" signature="testExplicitPropertyMappings()[pri:0, instance:com.facebook.presto.server.TestPluginManagerConfig@7b54cbdf]" name="testExplicitPropertyMappings" duration-ms="5" started-at="2014-05-07T07:03:50Z" finished-at="2014-05-07T07:03:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testExplicitPropertyMappings -->
      </class> <!-- com.facebook.presto.server.TestPluginManagerConfig -->
      <class name="com.facebook.presto.server.TestNodeResource">
        <test-method status="PASS" signature="setup()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="setup" is-config="true" duration-ms="758" started-at="2014-05-07T07:03:47Z" finished-at="2014-05-07T07:03:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testGetAllNodes()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="testGetAllNodes" duration-ms="232" started-at="2014-05-07T07:03:48Z" finished-at="2014-05-07T07:03:48Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllNodes -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="teardown" is-config="true" duration-ms="151" started-at="2014-05-07T07:03:48Z" finished-at="2014-05-07T07:03:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method status="PASS" signature="setup()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="setup" is-config="true" duration-ms="753" started-at="2014-05-07T07:03:49Z" finished-at="2014-05-07T07:03:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testGetFailedNodes()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="testGetFailedNodes" duration-ms="222" started-at="2014-05-07T07:03:49Z" finished-at="2014-05-07T07:03:49Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFailedNodes -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:com.facebook.presto.server.TestNodeResource@511c7571]" name="teardown" is-config="true" duration-ms="154" started-at="2014-05-07T07:03:49Z" finished-at="2014-05-07T07:03:50Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.facebook.presto.server.TestNodeResource -->
      <class name="com.facebook.presto.server.TestServer">
        <test-method status="PASS" signature="setup()[pri:0, instance:com.facebook.presto.server.TestServer@6b3a210]" name="setup" is-config="true" duration-ms="824" started-at="2014-05-07T07:03:50Z" finished-at="2014-05-07T07:03:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method status="PASS" signature="testServerStarts()[pri:0, instance:com.facebook.presto.server.TestServer@6b3a210]" name="testServerStarts" duration-ms="216" started-at="2014-05-07T07:03:51Z" finished-at="2014-05-07T07:03:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testServerStarts -->
        <test-method status="PASS" signature="teardown()[pri:0, instance:com.facebook.presto.server.TestServer@6b3a210]" name="teardown" is-config="true" duration-ms="141" started-at="2014-05-07T07:03:51Z" finished-at="2014-05-07T07:03:51Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- com.facebook.presto.server.TestServer -->
    </test> <!-- Command line test -->
  </suite> <!-- Command line suite -->
</testng-results>
